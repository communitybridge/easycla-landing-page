---
# Copyright The Linux Foundation and each contributor to CommunityBridge.
# SPDX-License-Identifier: MIT

service: cla-landing-page
frameworkVersion: '^3.27.0'

package:
  patterns:
    - '!**'
    - 'dist/landing-page/*'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage}
  region: us-east-1 # Region can't be configurable, lambda@edge is us-east-1 only.
  logRetentionInDays: 14
  lambdaHashingVersion: '20201221' # Resolution of lambda version hashes was improved with better algorithm, which will be used in next major release. Switch to it now by setting "provider.lambdaHashingVersion" to "20201221"

  deploymentBucket:
    serverSideEncryption: AES256 # Make sure items are uploaded encrypted.
  role: EdgeRole
  # This will add tags to every resource generated by your CloudFormation template
  stackTags:
    Name: ${self:service}
    STAGE: ${opt:stage}
    Product: EasyCLA
    ServiceType: Product
    Service: ${self:service}
    ServiceRole: UI
    ProgrammingPlatform: Angular
    Owner: 'David Deal'

  tracing:
    apiGateway: true
    lambda: true # optional, enables tracing for all functions (can be true (true equals 'Active') 'Active' or 'PassThrough')

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
          Resource: "*"

plugins:
  # Serverless Finch does s3 uploading. Called with 'sls client deploy'.
  # Also allows bucket removal with 'sls client remove'.
  - serverless-finch
  # Automatically versions and updates the lambda@edge function.
  - serverless-lambda-version
  # Automatically invalidates cloudfront after frontend bucket is deployed
  # - serverless-cloudfront-invalidate
  - serverless-plugin-tracing
  #- serverless-pseudo-parameters

custom:
  project: ${file(project-vars.yml):projectIdentifier}
  client: # Configurations for serverless finch.
    bucketName: ${self:custom.project}-${opt:stage}-${self:service}
    distributionFolder: dist/landing-page
    indexDocument: index.html
    # Because our application is a Single Page Application, we always want our index
    # documents to handle 404/403 urls.
    errorDocument: index.html
  #cloudfrontInvalidate:
  #  distributionIdKey: 'CloudfrontDistributionId'
  #  items: # one or more paths required
  #    - '/*'
  certificate:
    arn:
      # From env Certificate Manager -
      # currently, PROD is managed externally, DEV and STAGING are still managed by serverless
      dev: arn:aws:acm:us-east-1:395594542180:certificate/bb2d12f1-9a56-4d30-8633-b3ca2a92497d
      staging: arn:aws:acm:us-east-1:844390194980:certificate/03a48c9c-bebc-4d29-ad3b-02f93690a9e5
      prod: arn:aws:acm:us-east-1:716487311010:certificate/4a3c3018-df9e-4c3a-84a6-231317f8bcec
      other: arn:aws:acm:us-east-1:395594542180:certificate/07930a75-884a-4a51-af6b-b245952e0636
  product:
    domain:
      name:
        dev: 'lfcla.dev.platform.linuxfoundation.org'
        staging: 'lfcla.staging.platform.linuxfoundation.org'
        prod: 'easycla.lfx.linuxfoundation.org'
        other: 'dev.lfcla.com'
      alt:
        dev: 'dev.lfcla.com'
        staging: 'staging.lfcla.com'
        prod: 'easycla.lfx.linuxfoundation.org'
        other: 'dev.lfcla.com'
  ses_from_email:
    dev: admin@dev.lfcla.com
    staging: admin@staging.lfcla.com
    prod: admin@lfx.linuxfoundation.org

functions:
  # Configure a lambda@edge handler. Lambda@edge is a function that adds http headers to
  # cloudfront requests. We use it to enforce HTTP security best practices.
  clientEdge:
    handler: edge/dist/index.handler
    memorySize: 128 # This is the maximum memory size for lambda@edge functions
    timeout: 1 # This is the maximum execution time for lambda@edge functions

resources:
  Conditions:
    # https://gist.github.com/DavidWells/be078deef45f8cb2e280ccc7af947392
    isProd: { "Fn::Equals": [ "${env:STAGE}", "prod" ] }
    isStaging: { "Fn::Equals": [ "${env:STAGE}", "staging" ] }
    isDev: { "Fn::Equals": [ "${env:STAGE}", "dev" ] }
    # true when a TSL certificate should be created by serverless (false created externally)
    ShouldGenerateCertificate:
      Fn::Not: [ Fn::Equals: [ "${env:STAGE}", "prod" ] ]

  Resources:
    # The bucket the website is uploaded to. We make sure to turn on AES256 encryption, which
    # is best practice.
    WebsiteDeploymentBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        BucketName: ${self:custom.project}-${opt:stage}-${self:service}

    # Policy that only exposes bucket to cloudfront with proper
    # Origin Access Identity
    WebsiteDeploymentBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebsiteDeploymentBucket
        PolicyDocument:
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: Allow
              Resource:
                "Fn::Join":
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: WebsiteDeploymentBucket
                    - "/*"
              Principal:
                AWS:
                  "Fn::Join":
                    - " "
                    - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity"
                      - Ref: WebsiteOriginAccessIdentity

    WebsiteOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "CloudFrontOriginAccessIdentity for ${self:service}-${opt:stage}"

    # The cloudfront distribution wraps around our static website S3 bucket. Using a CDN to host our SPA is good
    # practice, and also lets us set custom headers using lambda@edge.
    CloudfrontDistribution:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - WebsiteDeploymentBucket
      Properties:
        DistributionConfig:
          Enabled: true
          Aliases:
            Fn::If:
              - isProd
              - - ${self:custom.product.domain.name.${opt:stage}, self:custom.product.domain.name.other}
              - - ${self:custom.product.domain.name.${opt:stage}, self:custom.product.domain.name.other}
                - ${self:custom.product.domain.alt.${opt:stage}, self:custom.product.domain.alt.other}
          ViewerCertificate:
            Fn::If:
              - ShouldGenerateCertificate
              - AcmCertificateArn:
                  Ref: Cert
                # The distribution accepts HTTPS connections from only viewers that support server name indication
                # Recommended, most browsers and clients released after 2010 support SNI.
                SslSupportMethod: sni-only
                # Specify the security policy that you want CloudFront to use for HTTPS connections
                # Recommend that you specify TLSv1.2_2018 unless your viewers are using browsers or devices that don’t support TLSv1.2
                # Allowed Values: SSLv3 | TLSv1 | TLSv1.1_2016 | TLSv1.2_2018 | TLSv1_2016
                MinimumProtocolVersion: TLSv1.2_2018
              - AcmCertificateArn: ${self:custom.certificate.arn.${opt:stage}, self:custom.certificate.arn.other}
                # The distribution accepts HTTPS connections from only viewers that support server name indication
                # Recommended, most browsers and clients released after 2010 support SNI.
                SslSupportMethod: sni-only
                # Specify the security policy that you want CloudFront to use for HTTPS connections
                # Recommend that you specify TLSv1.2_2018 unless your viewers are using browsers or devices that don’t support TLSv1.2
                # Allowed Values: SSLv3 | TLSv1 | TLSv1.1_2016 | TLSv1.2_2018 | TLSv1_2016
                MinimumProtocolVersion: TLSv1.2_2018
          Origins:
            - DomainName: { "Fn::GetAtt": [ WebsiteDeploymentBucket, DomainName ] }
              Id:
                Ref: WebsiteDeploymentBucket
              S3OriginConfig:
                OriginAccessIdentity:
                  "Fn::Join":
                    - ""
                    - - "origin-access-identity/cloudfront/"
                      - Ref: WebsiteOriginAccessIdentity
          # Routes besides / will result in S3 serving a 403
          # Redirect all routes back to the SPA where routes should
          # be handled
          CustomErrorResponses:
            - ErrorCode: 403
              ErrorCachingMinTTL: 1
              ResponseCode: 200
              ResponsePagePath: '/index.html'
          HttpVersion: http2
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            # Links our lambda@edge function, (which adds HTTPS our security headers), to the cloudfront distribution.
            #LambdaFunctionAssociations:
            #  - EventType: 'viewer-response'
            ##    # Cloudfront requires a lambda@edge arn in the format
            #    # 'arn:aws:lambda:${region}:${accountNumber}:function:${lambdaName}:${explicitVersion}'
            #    # We use the serverless-lambda-version plugin to automatically update this every time there is a change.
            #    #LambdaFunctionARN: ClientEdgeLambdaFunction
            #    LambdaFunctionARN: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:lambda-edge-${self:provider.stage}-landing-page:1
            Compress: true # Turns on gzipping
            MaxTTL: 600 # 10 minutes
            MinTTL: 0
            DefaultTTL: 600 # 10 minutes
            TargetOriginId:
              Ref: WebsiteDeploymentBucket
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          PriceClass: PriceClass_100 # Cheapest class, only hosts content at North American cloudfront locations.

    # Severless usually generates our roles out of the box, but lambda@edge support is lacking, so we have to create
    # our own. This role can assume the edgelambda.amazonaws.com role, (the lambda won't run without it).
    EdgeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.project}-${opt:stage}-cla-landing-page-edge-role
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - edgelambda.amazonaws.com # This is the important part of this role.
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: LogGroupPolicy # Permissions to access Lambda@edge log groups.
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:DescribeLogGroups
                    - logs:DescribeLogStreams
                    - logs:PutLogEvents
                    - logs:GetLogEvents
                    - logs:FilterLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - arn:aws:logs
                          - "Ref": "AWS::Region"
                          - "Ref": "AWS::AccountId"
                          - log-group
                          - "*"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

    Cert:
      Type: AWS::CertificateManager::Certificate
      Condition: ShouldGenerateCertificate
      Properties:
        DomainName: ${self:custom.product.domain.name.${opt:stage}, self:custom.product.domain.name.other}
        SubjectAlternativeNames:
          - ${self:custom.product.domain.alt.${opt:stage}, self:custom.product.domain.alt.other}
        ValidationMethod: DNS

  Outputs:
    CloudfrontDistributionId:
      Description: CDN Distribution ID
      Value:
        Ref: CloudfrontDistribution
